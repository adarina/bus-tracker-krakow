{"ast":null,"code":"import TileLayer from 'ol/layer/Tile';\nimport Map from 'ol/Map';\nimport Point from 'ol/geom/Point';\nimport XYZ from 'ol/source/XYZ';\nimport View from 'ol/View';\nimport VectorSource from 'ol/source/Vector';\nimport VectorLayer from 'ol/layer/Vector';\nimport * as i0 from \"@angular/core\";\nexport let MapService = /*#__PURE__*/(() => {\n  class MapService {\n    setUpMap() {\n      const my_point = new Point([19.9458135192313, 50.055499324083485]);\n      my_point.transform('EPSG:4326', 'EPSG:3857');\n      this.source = new XYZ({\n        url: 'http://tile.osm.org/{z}/{x}/{y}.png'\n      });\n      this.view = new View({\n        center: my_point.getCoordinates(),\n        zoom: 13\n      });\n      this.stopsVectorSource = new VectorSource();\n      this.stopsVectorLayer = new VectorLayer({\n        source: this.stopsVectorSource\n      });\n      this.vehiclesVectorSource = new VectorSource();\n      this.vehiclesVectorLayer = new VectorLayer({\n        source: this.vehiclesVectorSource\n      });\n      this.layer = new TileLayer({\n        source: this.source\n      }); // var coordinates = [[19.903361666666665, 49.956147499999986], [19.8972,49.955666388888915], [19.889511944444443,49.95514027777779]];\n      // const my_point1 = new Point([19.903361666666665, 49.956147499999986]);\n      // my_point1.transform('EPSG:4326', 'EPSG:3857');\n      // const my_point2 = new Point([19.889511944444443,49.95514027777779]);\n      // my_point2.transform('EPSG:4326', 'EPSG:3857');\n      // const route = new Polyline({\n      //   factor: 1e6,\n      // }).readGeometry(new LineString(coordinates), {\n      //   dataProjection: 'EPSG:4326',\n      //   featureProjection: 'EPSG:3857',\n      // });\n      // const routeFeature = new Feature({\n      //   type: 'route',\n      //   geometry: route,\n      // });\n      // const startMarker = new Feature({\n      //   type: 'icon',\n      //   geometry: new Point(my_point1.getCoordinates()),\n      // });\n      // const endMarker = new Feature({\n      //   type: 'icon',\n      //   geometry: new Point(my_point2.getCoordinates()),\n      // });\n      // const position = startMarker.getGeometry().clone();\n      // const geoMarker = new Feature({\n      //   type: 'geoMarker',\n      //   geometry: position,\n      // });\n      // const styles = {\n      //   'route': new Style({\n      //     stroke: new Stroke({\n      //       width: 6,\n      //       color: [237, 212, 0, 0.8],\n      //     }),\n      //   }),\n      //   'icon': new Style({\n      //     image: new Icon({\n      //       anchor: [0.5, 1],\n      //       src: 'data/icon.png',\n      //     }),\n      //   }),\n      //   'geoMarker': new Style({\n      //     image: new CircleStyle({\n      //       radius: 7,\n      //       fill: new Fill({color: 'black'}),\n      //       stroke: new Stroke({\n      //         color: 'white',\n      //         width: 2,\n      //       }),\n      //     }),\n      //   }),\n      // };\n      // const vectorLayer = new VectorLayer({\n      //   source: new VectorSource({\n      //     features: [routeFeature, geoMarker, startMarker, endMarker],\n      //   }),\n      //   style: function (feature) {\n      //     return styles[feature.get('type')];\n      //   },\n      // });\n      //map.addLayer(vectorLayer);\n      //     var route = new Feature({\n      //       type: 'route',\n      //       geometry: route,\n      //     });\n      // var geometry = new Polyline(coordinates);\n      // geometry.transform('EPSG:4326', 'EPSG:3857'); //Transform to your map projection\n      // route.setGeometry(geometry);\n      // //route.setStyle(style)\n      // this.stopsVectorSource.addFeature(route)\n\n      this.map = new Map({\n        target: 'map',\n        layers: [this.layer, this.stopsVectorLayer, this.vehiclesVectorLayer],\n        view: this.view\n      });\n    }\n\n  }\n\n  MapService.ɵfac = function MapService_Factory(t) {\n    return new (t || MapService)();\n  };\n\n  MapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapService,\n    factory: MapService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapService;\n})();","map":null,"metadata":{},"sourceType":"module"}